###!
@license
underscore.object.plus 1.0.0
https://github.com/lamgavin/underscore.object.plus

Copyright 2014 Gavin Lam and other contributors
Released under the MIT license
###

root      = exports ? this
_         = root._ or require 'underscore'
jQuery    = root.jQuery

$_ = {}

###
Below are some functions ported from jQuery,
aims at porting the extend function from it

url: http://code.jquery.com/jquery-2.1.0.js
version: 2.1.0
date fetched: 01 April 2014
###

# Delegate to the original function if jQuery is available
$_.isWindow = if jQuery? then jQuery.isWindow else (object)->
  return object? and object is object.window

# Delegate to the original function if jQuery is available
$_.isPlainObject = if jQuery? then jQuery.isPlainObject else (object)->
  # Not plain objects:
  # - Any object or value whose internal [[Class]] property
  #     is not "[object Object]"
  # - DOM nodes
  # - window
  return false if not _.isObject(object) or object.nodeType or _.isWindow object

  # Support: Firefox <20
  # The try/catch suppresses exceptions thrown when attempting to access
  # the "constructor" property of certain host objects, ie. |window.location|
  # https://bugzilla.mozilla.org/show_bug.cgi?id=814622
  try
    constructor = object.constructor
    return false if constructor and
      not Object.hasOwnProperty.call constructor.prototype, 'isPrototypeOf'
  catch e
    return false

  # If the function hasn't returned already, we're confident that
  # |obj| is a plain object, created by {} or constructed with new Object
  return true

$_._extend = _._extend or _.extend
# Delegate to the original function if jQuery is available
$_.extend = if jQuery? then jQuery.extend else (argv...)->
  target = argv[0] or {}
  i = 1
  length = argv.length
  deep = false

  # Handle a deep copy situation
  if typeof target is 'boolean'
    deep = target

    # skip the boolean and the target
    target = argv[i] or {}
    i++

  # Handle case when target is a string or something (possible in deep copy)
  target = {} if typeof target isnt 'object' and not _.isFunction target

  # extend jQuery itself if only one argument is passed
  if length is i
    target = @
    i--

  while i < length
    # Only deal with non-null/undefined values
    if (options = arguments[i]) isnt null
      # Extend the base object
      for name of options
        src = target[name]
        copy = options[name]

        # Prevent never-ending loop
        continue if target is copy

        # Recurse if we're merging plain objects or arrays
        if deep and copy and
            ( _.isPlainObject(copy) or (copyIsArray = _.isArray copy) )
          if copyIsArray
            copyIsArray = false
            clone = if src and _.isArray src then src else []
          else
            clone = if src and _.isPlainObject src then src else {}

          # Never move original objects, clone them
          target[name] = _.extend deep, clone, copy
        # Don't bring in undefined values
        else if copy isnt undefined
          target[name] = copy

    # Increase counter for while loop
    i++

  # Return the modified object
  return target

###
Above are some functions ported from jQuery,
aims at porting the extend function from it
###

# Adding strict functionality for isObject function
$_._isObject = _._isObject or _.isObject
$_.isObject = (object, strict = false)->
  # Delegate to original function if not applicable
  return _._isObject object if not strict

  isObject  = _.isObject object
  isObject &= not _.isArray object
  isObject &= not _.isFunction object

  return isObject

# Determine whether an object is of one of the specified types
$_.isTypes = (object, types...)->
  types = _.flatten types

  # Check object against each of the types specified
  isTypes = false
  for type in types
    break if isTypes
    isTypes = Object.prototype.toString.call(object) is "[object #{type}]"

  return isTypes

# Pick the name of all objects property of an object, with strict option
$_.objects = (object, strict = false)->
  names = (key for key, value of object when _.isObject value, strict)

  return do names.sort

# Pick the name of all arrays property of an object
$_.arrays = (object)->
  names = (key for key, value of object when _.isArray value)

  return do names.sort

# Pick the name of all property of the specified types of an object
$_.types = (object, types...)->
  names = (key for key, value of object when _.isTypes value, types)

  return do names.sort

# Adding nested functionality for pick function
$_._pick = _._pick or _.pick
$_.pick = $_.pickNested = $_.pickRecursive = (argv...)->
  [object, keys] = argv

  # Delegate to the original function if not applicable
  return _._pick.apply @, argv if not _.isObject keys, true

  # Pick out elements marked as pick
  copy  = {}
  for key, value of keys
    if not _.isObject value
      # Pick the marked element
      copy[key] = object[key] if object[key]?
    else
      # Pick recursively and apply only if something was picked
      result = _.pick object[key], value
      copy[key] = result unless _.isEmpty result

  return copy

# Adding nested functionality for omit function
$_._omit = _._omit or _.omit
$_.omit = $_.omitNested = $_.omitRecursive = (argv...)->
  [object, keys] = argv

  # Delegate to the original function if not applicable
  return _._omit.apply @, argv if not _.isObject keys, true

  # Pick out elements not marked as omit
  copy = {}
  for key, value of object
    if not keys[key]?
      # Pick the element as it was not marked
      copy[key] = value
    else if _.isObject keys[key]
      # Omit recursively and apply only if something was picked
      result = _.omit value, keys[key]
      copy[key] = result unless _.isEmpty result

  return copy

# Extend underscore and export the extended module if applicable
_.mixin $_
module.exports = _ if module?
